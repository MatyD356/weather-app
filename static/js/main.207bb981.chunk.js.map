{"version":3,"sources":["Card/CardChart/CardChart.js","Card/CardTemp/CardTemp.js","Card/CardTime/CardTime.js","Card/CardDate/CardDate.js","Card/CardWeather/CardWeather.js","Card/Card.js","CardContainer/CardContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["CardChart","props","useState","chartType","setChartType","opt","legend","display","title","scales","type","xAxes","ticks","fontColor","gridLines","color","zeroLineColor","yAxes","stepSize","callback","values","value","unit","tooltips","enabled","caretSize","backgroundColor","dataLine","labels","apiData","map","item","dt_txt","slice","datasets","label","fill","lineTension","borderColor","data","toCelsius","main","temp","toFarenheit","pressure","humidity","className","onClick","options","CardTemp","i","id","onChange","handleSwitch","checked","htmlFor","CardTime","decrementI","style","fontSize","incrementI","CardDate","getDayOfWeek","list","city","name","country","CardWeather","ChoseIcon","weather","description","Card","setData","setI","isCelsius","setOn","useEffect","length","KelwinToCelsius","tempKelvin","Math","round","Number","EPSILON","KelwinToFahrenheit","dataArray","hour","Date","getHours","loading","getDay","CardContainer","sortData","dataObj","sortedArray","floor","push","Object","assign","setState","sorted","changeLoding","loadingData","state","handleTouchStart","e","firstTouchEvent","touches","location","x","clientX","y","clientY","touchStartLocation","handleTouchEnd","changedTouches","differences","console","log","cards","document","querySelectorAll","activeCard","scrollIntoView","behavior","currentDay","this","process","url","fetch","mode","response","json","then","setTimeout","onTouchStart","onTouchEnd","index","uuidv4","key","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.207bb981.chunk.js","sourcesContent":["import { Line } from 'react-chartjs-2'\nimport './CardChart.scss'\nimport React, { useState } from 'react'\n\nconst CardChart = (props) => {\n  const [chartType, setChartType] = useState(\"Temp\");\n  const setData = () => {\n    if (chartType === \"Temp\") {\n      return props.unit ?\n        props.apiData.map(item => props.toCelsius(item.main.temp)) :\n        props.apiData.map(item => props.toFarenheit(item.main.temp))\n    } else if (chartType === \"Pressure\") {\n      return props.apiData.map(item => item.main.pressure)\n    } else if (chartType === \"Humidity\") {\n      return props.apiData.map(item => item.main.humidity)\n\n    }\n  }\n  const setUnits = (value) => {\n    if (chartType === \"Temp\") {\n      return props.unit ? value + ' °C' : value + ' °F'\n    } else if (chartType === \"Pressure\") {\n      return value + ' hPa'\n    } else if (chartType === \"Humidity\") {\n      return value + ' %'\n    }\n\n  }\n  const opt = {\n    legend: {\n      display: false\n    },\n    title: {\n      display: false,\n    },\n    scales: {\n      type: 'time',\n      xAxes: [{\n        display: true,\n        ticks: {\n          display: true,\n          fontColor: 'white'\n        },\n        gridLines: {\n          color: 'transparent',\n          zeroLineColor: 'transparent',\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          stepSize: 4,\n          fontColor: 'white',\n          callback: (values) => setUnits(values)\n        },\n        gridLines: {\n          color: 'transparent',\n        }\n      }]\n    },\n    tooltips: {\n      enabled: true,\n      caretSize: 10,\n      backgroundColor: 'rgba(255,255,255,0.1)'\n    }\n  };\n  const dataLine = {\n    labels: [...props.apiData.map(item => item.dt_txt.slice(10, 16))],\n    datasets: [\n      {\n        label: chartType,\n        fill: true,\n        lineTension: 0.35,\n        backgroundColor: 'rgba(255,255,255,0.4)',\n        borderColor: 'rgba(255,255,255,0.75)',\n        data: setData()\n      }\n    ]\n  };\n  return (\n    <div>\n      <button\n        className=\"CardChart button\"\n        onClick={() => { setChartType(\"Temp\") }}\n      >Temp</button>\n      <button\n        className=\"CardChart button\"\n        onClick={() => { setChartType(\"Pressure\") }}\n      >Pressure</button>\n      <button\n        className=\"CardChart button\"\n        onClick={() => { setChartType(\"Humidity\") }}\n      >Humidity</button>\n      < Line\n        data={dataLine}\n        options={opt} />\n    </div>\n  )\n}\nexport default CardChart","import React from 'react'\nimport './CardTemp.scss'\n\nconst CardTemp = (props) => {\n  return (\n    <div className=\"Card-temp\">\n      <div className=\"Card-temp-switch\">\n        <p>\n          {props.unit ? `${props.toCelsius(props.apiData[props.i].main.temp)}°C`\n            : `${props.toFarenheit(props.apiData[props.i].main.temp)}°F`}\n        </p>\n        <div className=\"on-off-switch\">\n          <input\n            type=\"checkbox\"\n            id={props.id}\n            className=\"on-off-switch-checkbox\"\n            onChange={props.handleSwitch}\n            checked={props.unit}\n          />\n          <label className=\"on-off-switch-label\" htmlFor={props.id}>\n            <span className=\"on-off-switch-inner\"></span>\n            <span className=\"on-off-switch-switch\"></span>\n          </label>\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\nexport default CardTemp","import React from 'react'\nimport './CardTime.scss'\n\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\nconst CardTime = (props) => {\n  return (\n    <div className=\"Card-time\">\n      <button className=\"Card-hour-up btn\" onClick={props.decrementI} >\n        <ArrowBackIosIcon style={{ fontSize: 40 }} />\n      </button>\n      <h2 className=\"Card-time-display\">{props.apiData[props.i].dt_txt.slice(10, 16)}</h2>\n      <button className=\"Card-hour-up btn\" onClick={props.incrementI} >\n        <ArrowForwardIosIcon style={{ fontSize: 40 }} />\n      </button>\n    </div>\n  )\n}\nexport default CardTime","import React from 'react'\nimport './CardDate.scss'\n\nconst CardDate = (props) => {\n  return (\n    <div className=\"Card-date-container\">\n      <div className=\"Card-day\">\n        <h2>{props.getDayOfWeek(props.data.list)}</h2>\n        <p>{props.data.city.name} | {props.data.city.country}</p>\n      </div>\n      <div className=\"Card-date\">\n        <h2>Date:</h2>\n        <p>{props.data.list[0].dt_txt.slice(0, 10)}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default CardDate","import React from 'react'\nimport './CardWeather.scss'\n\nconst CardWeather = (props) => {\n  return (\n    <div className=\"Card-weather\">\n      <div className=\"Card-weather-icon\">\n        {props.ChoseIcon(props.apiData)[0]}\n      </div>\n      <h2>Weather:</h2>\n      <p>{props.apiData[props.i].weather[0].description}</p>\n    </div>\n  )\n}\n\nexport default CardWeather","import React, { useEffect, useState } from 'react'\nimport CardChart from './CardChart/CardChart'\nimport CardTemp from './CardTemp/CardTemp'\nimport CardTime from './CardTime/CardTime'\nimport CardData from './CardDate/CardDate'\nimport CardWeather from './CardWeather/CardWeather'\nimport './Card.scss'\n\nimport WbSunnyOutlinedIcon from '@material-ui/icons/WbSunnyOutlined';\nimport CloudIcon from '@material-ui/icons/Cloud';\nimport GrainIcon from '@material-ui/icons/Grain';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport WavesIcon from '@material-ui/icons/Waves';\nimport NightsStayOutlinedIcon from '@material-ui/icons/NightsStayOutlined';\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\n\nconst Card = (props) => {\n  const [data, setData] = useState(null);\n  const [i, setI] = useState(0);\n  const [isCelsius, setOn] = useState(true);\n  useEffect(() => {\n    setData(props.data)\n    if (props.data.list && props.data.list.length === 8) {\n      setI(4)\n    }\n  }, [props.data])\n  const getDayOfWeek = (dataArray) => {\n    const week = [\n      'Sunday', 'Monday', 'Tuesday', 'Wendnesday', 'Thursday', 'Friday', 'Saturday'\n    ]\n    return week[new Date(dataArray[i].dt_txt.slice(0, 10)).getDay()];\n  }\n  const KelwinToCelsius = (tempKelvin) => {\n    return Math.round(((tempKelvin - 273.15) + Number.EPSILON) * 100) / 100;\n  }\n  const KelwinToFahrenheit = (tempKelvin) => {\n    return Math.round((((tempKelvin * (9 / 5)) - 459.67) + Number.EPSILON) * 100) / 100;\n  }\n  const ChoseIcon = (dataArray) => {\n    let hour = new Date(dataArray[i].dt_txt).getHours()\n    switch (dataArray[i].weather[0].main) {\n      case 'Thunderstorm':\n        if (hour > 18 || hour < 6) {\n          return [<FlashOnIcon style={{ fontSize: 200 }} />, 'cold']\n        }\n        return [<FlashOnIcon style={{ fontSize: 200 }} />, 'storm']\n      case 'Drizzle':\n        if (hour > 18 || hour < 6) {\n          return [<GrainIcon style={{ fontSize: 200 }} />, 'cold']\n        }\n        return [<GrainIcon style={{ fontSize: 200 }} />, 'rainy']\n      case 'Rain':\n        if (hour > 18 || hour < 6) {\n          return [<GrainIcon style={{ fontSize: 200 }} />, 'cold']\n        }\n        return [<GrainIcon style={{ fontSize: 200 }} />, 'rainy']\n      case 'Snow':\n        return [<AcUnitIcon style={{ fontSize: 200 }} />, 'cold']\n      case 'Mist':\n        if (hour > 18 || hour < 6) {\n          return [<WavesIcon style={{ fontSize: 200 }} />, 'cold']\n        }\n        return [<WavesIcon style={{ fontSize: 200 }} />, 'mild']\n      case 'Clouds':\n        if (hour > 18 || hour < 6) {\n          return [<CloudIcon style={{ fontSize: 200 }} />, 'cold']\n        }\n        return [<CloudIcon style={{ fontSize: 200 }} />, 'mild']\n      default:\n        if (hour > 18 || hour < 6) {\n          return [<NightsStayOutlinedIcon style={{ fontSize: 200 }} />, 'cold']\n        }\n        return [<WbSunnyOutlinedIcon style={{ fontSize: 200 }} />, 'hot']\n    }\n  }\n  const handleSwitch = () => {\n    setOn(!isCelsius);\n  }\n  const decrementI = () => i > 0 ? setI(i - 1) : null;\n\n  const incrementI = () => i < data.list.length - 1 ? setI(i + 1) : null;\n\n  return (\n    <div className={data && !props.loading ? `Card ${ChoseIcon(data.list)[1]}` : `Card`} >\n      {props.loading === true ?\n        <div className=\"Card-loading\" >\n          <div className=\"Card-spinner\" />\n        </div> : data ?\n          <div className=\"Card-content\">\n\n            {/* card date */}\n            <CardData\n              getDayOfWeek={getDayOfWeek}\n              data={data} />\n\n            {/* card weather */}\n            <CardWeather\n              i={i}\n              apiData={data.list}\n              ChoseIcon={ChoseIcon} />\n\n            {/* card time */}\n            <CardTime\n              incrementI={incrementI}\n              decrementI={decrementI}\n              apiData={data.list}\n              i={i} />\n\n            {/* card temp*/}\n            <CardTemp\n              id={props.id}\n              i={i}\n              unit={isCelsius}\n              handleSwitch={handleSwitch}\n              toFarenheit={KelwinToFahrenheit}\n              toCelsius={KelwinToCelsius}\n              apiData={data.list}\n            />\n\n            {/* card chart*/}\n            <CardChart\n              unit={isCelsius}\n              toCelsius={KelwinToCelsius}\n              toFarenheit={KelwinToFahrenheit}\n              apiData={data.list}\n            />\n\n          </div >\n          : null}\n    </div >\n  )\n}\n\nexport default Card","import React from 'react'\nimport './CardContainer.scss'\nimport Card from '../Card/Card'\nimport { v4 as uuidv4 } from 'uuid';\n\nclass CardContainer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentDay: new Date().getDay(),\n      loadingData: null,\n      sorted: [[], [], [], [], []],\n      data: {},\n      activeCard: 0,\n      touchStartLocation: {\n        x: null,\n        y: null\n      }\n    }\n  }\n  async componentDidMount() {\n    this.changeLoding()\n    try {\n      //rijeka\n      const city = \"moscow\"\n      const key = process.env.REACT_APP_NOT_SECRET_CODE;\n      const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${key}`\n      const response = await fetch(url, { mode: 'cors' });\n      //eslint-disable-next-line\n      const json = await response.json()\n        .then(json => {\n          this.sortData(json.list, json);\n          setTimeout(() => this.changeLoding(), 1000)\n          return json\n        })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  sortData = (dataArray, dataObj) => {\n    //to fix\n    //6 offset by 1\n    //18 offset by 1\n    //12 offset by 1\n    const sortedArray = []\n    let hour = (8 - Math.floor(new Date().getHours() / 3));\n    for (let i = 0; i < dataArray.length; i += 8) {\n      if (i < 8) {\n        sortedArray.push(Object.assign({}, dataObj, { list: [...dataArray.slice(i, hour + i)] }));\n      } else {\n        sortedArray.push(Object.assign({}, dataObj, { list: [...dataArray.slice(hour + i - 8, hour + i)] }));\n      }\n    }\n    this.setState({\n      sorted: sortedArray\n    })\n  }\n  changeLoding = () => {\n    this.setState({\n      loadingData: !this.state.loadingData\n    })\n  }\n  handleTouchStart = (e) => {\n    const firstTouchEvent = e.touches[0];\n    const location = {\n      x: firstTouchEvent.clientX,\n      y: firstTouchEvent.clientY\n    };\n    this.setState({\n      touchStartLocation: location\n    });\n  }\n  handleTouchEnd = (e) => {\n    const firstTouchEvent = e.changedTouches[0];\n    const location = {\n      x: firstTouchEvent.clientX,\n      y: firstTouchEvent.clientY\n    };\n    const differences = {\n      x: this.state.touchStartLocation.x - location.x,\n      y: this.state.touchStartLocation.y - location.y\n    };\n    console.log(differences);\n    const cards = document.querySelectorAll('.Card')\n    if (differences.x > 50 && this.state.activeCard < cards.length - 1) {\n      this.setState({\n        activeCard: this.state.activeCard + 1\n      }, () => cards[this.state.activeCard].scrollIntoView({ behavior: \"smooth\" })\n      )\n    } else if (differences.x < -50 && this.state.activeCard > 0) {\n      this.setState({\n        activeCard: this.state.activeCard - 1\n      }, () => cards[this.state.activeCard].scrollIntoView({ behavior: \"smooth\" })\n      )\n    }\n  }\n  render() {\n    return (\n      <div\n        onTouchStart={this.handleTouchStart}\n        onTouchEnd={this.handleTouchEnd}\n        className=\"CardContainer\" >\n        {this.state.sorted.map((item, index) => {\n          return (<Card\n            id={uuidv4()}\n            key={index}\n            loading={this.state.loadingData}\n            data={item}\n          />)\n        })}\n      </div >\n    )\n  }\n}\n\nexport default CardContainer","import React from 'react';\nimport './App.scss';\nimport CardContainer from '../CardContainer/CardContainer'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <CardContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}